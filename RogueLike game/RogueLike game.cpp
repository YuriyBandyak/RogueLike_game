#include <iostream>
#include <stdlib.h>     /* srand, rand */
#include <cstdlib> // System error
#include <conio.h> // __getche()
#include <sstream> // stringstream ss;

using namespace std;

bool play = false;
bool overwrite_field = true;
bool regen_lvl = true;
int game_level = 1;
int killed_enemies = 0;
int luck = 0;
int luck_opportunities = 0;
int next_lvl_door_pos = 0;

struct Item
{
	int position = 0;
	int level = 0;
	string type = ""; // armor, sword, ring, potion
	int dmg = 0;
	int crit_chance = 0;
	int hp_points = 0;
	int potion_charge = 2;
};

struct Player
{
	int position = 0;
	char field_under_player = '.';
	int x = 0;
	int y = 0;
	int room_index = 0;
	//stats
	int default_hp = 3;
	int current_hp = 0;
	int max_hp = 0;
	int default_dmg = 2;
	int current_dmg = 2;
	int dodge_chance = 10;
	int default_crit_chance = 5;
	int current_crit_chance = 5;
	int gold_amount = 0;
	//inventory
	Item sword{0,0,"sword",1,0,0};
	Item ring{ 0,0,"ring",0,5,0 };
	Item armor{ 0,0,"armor",0,0,1 };
	Item potion{ 0,0,"potion",0,0,1 };
};

Player player;

struct Room
{
	int r_index = 1;
	int height = 0;
	int width = 0;
	int x = 0;
	int y = 0;
	int position = 0;
	bool doors[4] = { false, false, false, false };
	bool have_access_to_player = false;
	int fields[400] = { 0 };
};

struct Enemy
{
	int lvl = 0;
	int hp = 0;
	int dmg = 0;
	int dodge_chance = 5;
	const int crit_chance = 10;
	int position = 0;
	int x = 0;
	int y = 0;
	int room_index = 0;
	int stun_time = 0;
};

Room room1;
Room room2;
Room room3;
Room room4;

Item item1;
Item item2;
Item item3;
Item item4;

Enemy enemy1;
Enemy enemy2;
Enemy enemy3;
Enemy enemy4;

int fields_with_stats[13] = {0,0,0,0,0,0,0,0,0,0,0,0,0};

char game_view[3600];

//enemy 
/*
		_____
	.-,;='';_),-.
	 \_\(),()/_/
	   (,___,)
	  ,-/`~`\-,___
	 / /).:.('--._)
	{_[ (_,_)
		| Y |
       /  |  \
	   """ """
*/

char enemy_view_1[364] = { // 28x13
	' ', '`', ';', '-', ' ', '.', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '_', '_', '_', ',', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
	' ', ' ', ' ', '`', '.', '`', '\\', '_', '.', '.', '.', '.', '_', ' ', '/', '`', '.', '-', '"', '`', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
	' ', ' ', ' ', ' ', ' ', '\\', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '/', ' ', ' ', ' ', ' ', ' ', ' ', ',', ' ', ' ', ' ', ' ',
	' ', ' ', ' ', ' ', ' ', '/', ' ', '(', ')', ' ', ' ', ' ', '(', ')', ' ', ' ', '\\', ' ', ' ', ' ', ' ', '.', '\'', ' ', '`', '-', '.', '_',
	' ', ' ', ' ', ' ', '|', ')', ' ', ' ', ' ', '.', ' ', ' ', ' ', ' ', ' ', '(', ')', '\\', ' ', ' ', '/', ' ', ' ', ' ', '_', '.', '\'', ' ',
	' ', ' ', ' ', ' ', '\\', ' ', '-', ' ', '\\', ' ', '-', ' ', ' ', ' ', ' ', ' ', ' ', ',', ';', ' ', ' ', '\'', '.', ' ', '<', ' ', ' ', ' ',
	' ', ' ', ' ', ' ', ' ', ';', '.', '_', '_', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ',', ';', '|', ' ', ' ', ' ', '>', ' ', '\\', ' ', ' ', ' ',
	' ', ' ', ' ', ' ', '/', ' ', ' ', ',', ' ', ' ', ' ', ' ', ' ', '/', ' ', ',', ' ', ' ', '|', '.', '-', '\'', '.', '-', '\'', ' ', ' ', ' ',
	' ', ' ', ' ', '(', '_', ' ', '/', ' ', ' ', ' ', ' ', ' ', '(', '_', '/', ' ', ',', ';', '|', '.', '<', '`', ' ', ' ', ' ', ' ', ' ', ' ',
	' ', ' ', ' ', ' ', ' ', '\\', ' ', ' ', ' ', ' ', ' ', ',', ' ', ' ', ' ', ' ', ' ', ' ', ';', '-', '`', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
	' ', ' ', ' ', ' ', ' ', ' ', ' ', '>', ' ', ' ', ' ', ' ', '\\', ' ', ' ', ' ', ' ', '/', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
	' ', ' ', ' ', ' ', ' ', ' ', '(', '_', ',', ' ', '-', '\'', '`', '>', ' ', '.', '\'', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
	' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '(', '_', ',', '\'', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '
};

// xD
/* enemy view 1
`;-.          ___,
  `.`\_...._/`.-"`
	\        /      ,
	/()   () \    .' `-._
   |)  .    ()\  /   _.'
   \  -'-     ,; '. <
	;.__     ,;|   > \
   / ,    / ,  |.-'.-'
  (_/    (_/ ,;|.<`
	\    ,     ;-`
	 >   \    /
	(_,-'`> .'
         (_,'
*/

// xDD
/*
	   ___------__
 |\__-- /\       _-
 |/    __      -
 //\  /  \    /__
 |  o|  0|__     --_
 \\____-- __ \   ___-
 (@@    __/  / /_
	-_____---   --_
	 //  \ \\   ___-
   //|\__/  \\  \
   \_-\_____/  \-\
		// \\--\|   
   ____//  ||_
  /_____\ /___\
  */

char default_game_view[3600] = {    // 120x30
	'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ',' ','_','_','_','_','_','_','_','_','_','_','_','_',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ','|',' ',' ',' ',' ',',',',',',',',',',',' ',' ',' ','|',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ','|',' ',' ',' ','/',' ',' ',' ',' ',' ','\\',' ',' ','|',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ','|',' ',' ','(',' ',' ','^',' ','^',' ',' ',')',' ','|',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ','|',' ',' ',' ','|',' ',' ','\\',' ',' ','|',' ',' ','|',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ','|',' ',' ',' ',' ','\\',' ','-',' ','/',' ',' ',' ','|',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ','|',' ',' ',' ',' ',' ','"','"','"',' ',' ',' ',' ','|',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ','\\','-','-','-','-','-','-','-','-','-','-','-','-','/',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ','Y','o','u','r',' ','s','t','a','t','s',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ','H','P',':',' ',' ',' ',' ',' ',' ','N','N',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ','D','M','G',':',' ',' ',' ',' ',' ','N','N',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ','G','o','l','d',':',' ',' ',' ',' ','N','N',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ','C','r','i','t',':',' ',' ',' ',' ','N','N','%',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ','I','n','w','e','n','t','o','r','y',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ','S','w','o','r','d',' ','l','v','l','.',' ','N','N',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ',' ','d','m','g',' ','+',' ','N','N',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ','R','i','n','g',' ','l','v','l','.',' ','N','N',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ',' ','c','r','i','t',' ','+',' ','N','N','%',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ','A','r','m','o','r',' ','l','v','l','.',' ','N','N',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ',' ','h','p',' ','+',' ','N','N',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ','P','o','t','i','o','n',' ','l','v','l','.',' ','N','N',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ',' ','h','p',' ','+',' ',' ',' ','N','N',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ','[','p',']','U','s','e',' ','p','o','t','i','o','n','N','N','/','2',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-',' ',
	' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '

};

char menu_view[3600] = {    // 120x30
	'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ','>',' ','S','t','a','r','t',' ','g','a','m','e',' ','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ',' ','H','e','l','p',' ',' ',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ',' ','E','x','i','t',' ',' ',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-',' ',
	' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '

};

char empty_view[3600] = {    // 120x30
	'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-',' ',
	' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '

};

string lines[29] = { "","","" ,"" ,"" ,"" ,"" ,"" ,"" ,"" ,"" ,"" ,"" ,"" ,"" ,"" ,"" ,"" ,"" ,"" ,"" ,"" ,"" ,"" ,"" ,"" ,"" ,"" ,"" };

void GetXY(int* x, int* y, int pos) {
	*y = pos / 120;
	*x = pos - (*y * 120);
}

void PasteInView(char block[], int b_height, int b_width, int b_pos, char* view) {
	for (int j = 0; j < b_height; j++) {
		for (int i = 0; i < b_width; i++) {
			view[i + j * 120 + b_pos] = block[i + j * b_width];
		}
	}
}

void FoundSmth(Item item);

char ConvertIntToChar(int int_) {
	std::stringstream ss;			// converting int to char
	ss << int_;
	string out_string = ss.str();
	char char_ = out_string[0];

	return char_;
}

void MergeArrays(char* array1, int last_element_number1, char array2[], int size2) {
	for (int i = 0; i < size2; i++) {
		array1[last_element_number1 + i] = array2[i];
	}
}

void MergeArrays(char* array1, int last_element_number1, char c) {
	array1[last_element_number1] = c;
}

void MergeArrays(char* array1, int last_element_number1, char array2[], int first_element_number2, int size2) {
	for (int i = 0; i < size2; i++) {
		array1[last_element_number1 + i] = array2[first_element_number2 + i];
	}
}

void SetStats(int stat_pos, int stat, char* view) {
	if (stat >= 10) {
		view[stat_pos] = ConvertIntToChar(stat / 10);
		view[stat_pos + 1] = ConvertIntToChar(stat - ((stat / 10) * 10));
	}
	else {
		view[stat_pos] = ' ';
		view[stat_pos + 1] = ConvertIntToChar(stat);
	}
}

bool CheckField(Room p, int point) {
	for (int i = 0; i < p.height * p.width; i++) {
		if (p.fields[i] == point) {
			return true;
			break;
		}
	}
	return false;
}

bool CheckField(Room room, int point1, int point2) {
	int x1, y1;
	int x2, y2;
	GetXY(&x1, &y1, point1);
	GetXY(&x2, &y2, point2);
	if (y1 == y2) {
		if (x1 < x2) {
			for (int i = 0; i < x2 - x1; i++) {
				if (CheckField(room, i + x1 + (y1 * 120))) return true;
			}
		}
		else {
			for (int i = 0; i < x1 - x2; i++) {
				if (CheckField(room, i + x2 + (y2 * 120))) return true;
			}
		}
	}
	else if (x1 == x2) {
		if (y1 < y2) {
			for (int i = 0; i < y2 - y1; i++) {
				if (CheckField(room, (i + y1) * 120 + x1)) return true;
			}
		}
		else {
			for (int i = 0; i < y1 - y2; i++) {
				if (CheckField(room, (i + y2) * 120 + x2)) return true;
			}
		}
	}
	return false;
}

void SetCurrentStats() {
	player.current_hp = player.default_hp + player.armor.hp_points;
	player.current_dmg = player.default_dmg + player.sword.dmg;
	player.current_crit_chance = player.default_crit_chance + player.ring.crit_chance;
	player.max_hp = player.current_hp;
}

void SetCurrentStatsWithoutHP() {
	player.current_dmg = player.default_dmg + player.sword.dmg;
	player.current_crit_chance = player.default_crit_chance + player.ring.crit_chance;
	player.max_hp = player.current_hp;
}

void SetCurrentStats(Item item) {
	if (item.type == "sword") {
		int difference = item.dmg - player.sword.dmg;
		player.current_dmg += difference;
	}else if(item.type == "ring") {
		int difference = item.crit_chance - player.ring.crit_chance;
		player.current_crit_chance += difference;
	}
	else if (item.type == "armor") {
		int difference = item.hp_points - player.armor.hp_points;
		player.current_hp += difference;
		if (player.current_hp > player.max_hp) player.current_hp = player.max_hp;
	}
}

void SpawnNextLvlDoor() {
	do {
		next_lvl_door_pos = room3.x + 2 + rand() % (room3.width - 4) +
			120 * (room3.y + 2 + rand() % (room3.height - 4));
		if (game_view[next_lvl_door_pos] == '.') {
			game_view[next_lvl_door_pos] = '^';
		}
	} while (game_view[next_lvl_door_pos] != '^');
}

void SpawnEnemy() {
	int enemy_amount;
	switch (game_level)
	{
	case 1:
		enemy_amount = 1;
		break;
	}

	do { 
		enemy2.position = room2.x + 1 + rand() % (room2.width - 2) +
			120 * (room2.y + 1 + rand() % (room2.height - 2));
		if (game_view[enemy2.position] == '.') {
			game_view[enemy2.position] = 'E';
		}
		enemy2.room_index = 2;
		enemy2.lvl = game_level - 1;
		if (enemy2.lvl <= 0) {
			enemy2.dmg = 2;
			enemy2.hp = 6;
			enemy2.dodge_chance += 1;
		}
		else {
			enemy2.dmg = enemy2.lvl * 2;
			enemy2.hp = enemy2.lvl * 3;
			enemy2.dodge_chance += 2* game_level;
		}
	} while (game_view[enemy2.position] != 'E');
	
	if (game_level > 3) {
		do {
			enemy4.position = room4.x + 1 + rand() % (room4.width - 2) +
				120 * (room4.y + 1 + rand() % (room4.height - 2));
			if (game_view[enemy4.position] == '.') {
				game_view[enemy4.position] = 'E';
			}
			enemy4.room_index = 4;
			enemy4.lvl = game_level - 1;
			enemy4.dmg = enemy4.lvl * 2;
			enemy4.hp = enemy4.lvl * 3;

		} while (game_view[enemy4.position] != 'E');
	}

	if (game_level > 6) {
		do {
			enemy3.position = room3.x + 1 + rand() % (room3.width - 2) +
				120 * (room3.y + 1 + rand() % (room3.height - 2));
			if (game_view[enemy3.position] == '.') {
				game_view[enemy3.position] = 'E';
			}
			enemy3.room_index = 3;
			enemy3.lvl = game_level - 1;
			enemy3.dmg = enemy3.lvl * 2;
			enemy3.hp = enemy3.lvl * 3;

		} while (game_view[enemy3.position] != 'E');
	}

	if (game_level > 9) {
		do {
			enemy1.position = room1.x + 1 + rand() % (room1.width - 2) +
				120 * (room1.y + 1 + rand() % (room1.height - 2));
			if (game_view[enemy1.position] == '.') {
				game_view[enemy1.position] = 'E';
			}
			enemy1.room_index = 1;
			enemy1.lvl = game_level - 1;
			enemy1.dmg = enemy1.lvl * 2;
			enemy1.hp = enemy1.lvl * 3;

		} while (game_view[enemy1.position] != 'E');
	}
}

void Battle(Enemy* enemy);

void PlayerStatsChange(char* view);

void EnemyMove(Enemy* enemy) {
	if (player.room_index == enemy->room_index && enemy->hp > 0 && enemy->stun_time == 0) {
		overwrite_field = true;

		GetXY(&enemy->x, &enemy->y, enemy->position);

		game_view[enemy->position] = '.';
		if (enemy->x < player.x) { enemy->x++; }
		else if (enemy->x > player.x){ enemy->x--; }

		if (enemy->y < player.y) { enemy->y++; }
		else if (enemy->y > player.y){ enemy->y--; }

		if (game_view[enemy->position] == '.' || game_view[enemy->position] == '@') {
			enemy->position = enemy->x + enemy->y * 120;
			if (enemy->position == player.position) {
				Battle(enemy);
				PlayerStatsChange(game_view);
			}
			else {
				game_view[enemy->position] = 'E';
			}
		}
		
	}else if(enemy->hp <= 0){
		if (game_view[enemy->position] != '@') {
			game_view[enemy->position] = '.';
		}
	}
	else if (enemy->stun_time > 0) {
		if (game_view[enemy->position] != '@') {
			game_view[enemy->position] = 'E';
		}
		enemy->stun_time--;
	}
}

void PlayerStatsChange(int* array, char* view) {
	overwrite_field = true;
	for (int i = 0; i < 13; i++) {
		switch (i)
		{
			//Stats
		case 0:
			SetStats(array[i], player.current_hp, view);
			break;
		case 1:
			SetStats(array[i], player.current_dmg, view);
			break;
		case 2:
			SetStats(array[i], player.gold_amount, view);
			break;
		case 3:
			SetStats(array[i], player.current_crit_chance, view);
			break;

			//Items
		case 4:
			SetStats(array[i], player.sword.level, view);
			break;
		case 5:
			SetStats(array[i], player.sword.dmg, view);
			break;
		case 6:
			SetStats(array[i], player.ring.level, view);
			break;
		case 7:
			SetStats(array[i], player.ring.crit_chance, view);
			break;
		case 8:
			SetStats(array[i], player.armor.level, view);
			break;
		case 9:
			SetStats(array[i], player.armor.hp_points, view);
			break;
		case 10:
			SetStats(array[i], player.potion.level, view);
			break;
		case 11:
			if (player.potion.dmg != 0) {
				SetStats(array[i], player.potion.dmg, view);
				char dmg[] = { 'd','m','g',' ','+',' ' };
				MergeArrays(game_view, 2985, dmg, 6);
			}
			else if (player.potion.crit_chance != 0) {
				SetStats(array[i], player.potion.crit_chance, view);
				char dmg[] = { 'c','r','i','t',' ','+',' ' };
				MergeArrays(game_view, 2985, dmg, 7);
			}
			else {
				SetStats(array[i], player.potion.hp_points, view);
				char dmg[] = { 'h','p',' ','+',' ' };
				MergeArrays(game_view, 2985, dmg, 5);
			}

			break;
		case 12:
			SetStats(array[i], player.potion.potion_charge, view);
			break;
		}
	}
}

void PlayerStatsChange(char* view) {
	if (fields_with_stats[0] == 0) {
		int j = 0;
		for (int i = 2; i < 3600; i++) {
			if (view[i] == 'N') {

				if (view[i - 1] != 'N') {
					
					switch (j)
					{
						//Stats
					case 0:
						SetStats(i, player.default_hp + player.armor.hp_points, view);
						break;
					case 1:
						SetStats(i, player.current_dmg + player.sword.dmg, view);
						break;
					case 2:
						SetStats(i, player.gold_amount, view);
						break;
					case 3:
						SetStats(i, player.current_crit_chance + player.ring.crit_chance, view);
						break;

						//Items
					case 4:
						SetStats(i, player.sword.level, view);
						break;
					case 5:
						SetStats(i, player.sword.dmg, view);
						break;
					case 6:
						SetStats(i, player.ring.level, view);
						break;
					case 7:
						SetStats(i, player.ring.crit_chance, view);
						break;
					case 8:
						SetStats(i, player.armor.level, view);
						break;
					case 9:
						SetStats(i, player.armor.hp_points, view);
						break;
					case 10:
						SetStats(i, player.potion.level, view);
						break;
					case 11:
						if (player.potion.dmg != 0) {
							SetStats(i, player.potion.dmg, view);
							char dmg[] = { 'd','m','g',' ','+',' ' };
							MergeArrays(view, 2985, dmg, 6);
						}
						else if (player.potion.crit_chance != 0) {
							SetStats(i, player.potion.crit_chance, view);
							char dmg[] = { 'c','r','i','t',' ','+',' ' };
							MergeArrays(view, 2985, dmg, 7);
						}
						else {
							SetStats(i, player.potion.hp_points, view);
							char dmg[] = { 'h','p',' ','+',' ' };
							MergeArrays(view, 2985, dmg, 5);
						}
						break;
					case 12:
						SetStats(i, player.potion.potion_charge, view);
						break;
					}

					fields_with_stats[j] = i;
					j++;

				}
			}
		}
	}
	else {
		PlayerStatsChange(fields_with_stats, view);
	}
}

void SpawnLoot(Room room, Item *item) {
	//gold spawn
	int gold_chance = rand() % 100;
	if (gold_chance < 40) {
		int gold_pos = room.x + 2 + rand() % (room.width - 4) +
			120 * (room.y + 2 + rand() % (room.height - 4));

		luck++;
		luck_opportunities++;

		if (game_view[gold_pos] == '.') {
			game_view[gold_pos] = '$';
		}
	}
	
	//items spawn
	int item_chance = rand() % 100;
	if (item_chance < 30) {
		int item_type = rand() % 4;
		luck++;
		luck_opportunities++;

		switch (item_type)
		{
		case 0:
			item->type = "sword";
			item->level = game_level + (rand() % 3 - 1);
			if (item->level < 1) {
				item->dmg = 1;
			}
			else {
				item->dmg = item->level * 2;
			}
			item->crit_chance = 0;
			item->hp_points = 0;
			break;
		case 1:
			item->type = "ring";
			item->level = game_level + (rand() % 3 - 1);
			if (item->level < 1) {
				item->crit_chance = 5;
			}
			else {
				item->crit_chance = item->level * 5;
			}
			item->dmg = 0;
			item->hp_points = 0;
			break;
		case 2:
			item->type = "armor";
			item->level = game_level + (rand() % 3 - 1);
			if (item->level < 1) {
				item->hp_points = 1;
			}
			else {
				item->hp_points = item->level * 2;
			}
			item->crit_chance = 0;
			item->dmg = 0;
			break;
		case 3:
			item->type = "potion";
			item->level = game_level + (rand() % 3 - 1);
			int potion_type = rand() % 3;
			item->dmg = 0;
			item->hp_points = 0;
			item->crit_chance = 0;

			switch (potion_type)
			{
			case 0:
				if (item->level < 1) {
					item->dmg = 1;
				}
				else {
					item->dmg = item->level * 2;
				}
				break;
			case 1:
				if (item->level < 1) {
					item->crit_chance = 5;
				}
				else {
					item->crit_chance = item->level * 5;
				}
				break;
			case 2:
				if (item->level < 1) {
					item->hp_points = 1;
				}
				else {
					item->hp_points = item->level * 2;
				}
				break;
			}
			break;
		}

		int item_pos = room.x + 2 + rand() % (room.width - 4) +
			120 * (room.y + 2 + rand() % (room.height - 4));
		if (game_view[item_pos] == '.') {
			game_view[item_pos] = '&';
		}
		item->position = item_pos;
	}
}

void Show(string* line, bool *overwrite) {  // used for game_view
	if (overwrite) {
		*overwrite = false;
		fill_n(line,29,"");

		int i = 0;
		int j = 0;
		if (line[0] == "") { // "convert" char lines(elements from 0 to 120) in one string    29 times for each lines[]
			for (j = 0; j < 29;) {
				for (i = j * 120; i < 120 + (j * 120); i++) {
					line[j] = line[j] + game_view[i];
				}
				j++;
			}
			std::cout.flush();
		}
	}
	int i = 0;
	int j = 0;
	// if previous step is done then change lines around player (lines[player-1], lines[player], lines[player+1])
	line[(player.position / 120) - 1] = "";
	line[player.position / 120] = "";
	line[(player.position / 120) + 1] = "";
	for (i = player.position / 120 * 120; i < 120 + (player.position / 120 * 120); i++) {
		line[(player.position / 120) - 1] = line[(player.position / 120) - 1] + game_view[i - 120];
		line[player.position / 120] = line[player.position / 120] + game_view[i];
		line[(player.position / 120) + 1] = line[(player.position / 120) + 1] + game_view[i + 120];
	}

	for (j = 0; j < 29; j++) { // same as for char array, but using string so there is less operation and its faster to "draw"
		std::cout << line[j] << endl;
	}
}

void Show(char* view) {  // used for other views
	
	string line[29] = { "","","" ,"" ,"" ,"" ,"" ,"" ,"" ,"" ,"" ,"" ,"" ,"" ,"" ,"" ,"" ,"" ,"" ,"" ,"" ,"" ,"" ,"" ,"" ,"" ,"" ,"" ,"" };

	int i = 0;
	int j = 0;
	if (line[0] == "") { // "convert" char lines(elements from 0 to 120) in one string    29 times for each lines[]
		for (j = 0; j < 29;) {
			for (i = j * 120; i < 120 + (j * 120); i++) {
				line[j] = line[j] + view[i];
			}
			j++;
		}
		std::cout.flush();
	}

	for (j = 0; j < 29; j++) { // same as for char array, but using string so there is less operation and its faster to "draw"
		std::cout << line[j] << endl;
	}
}

//void Show() {          // old function
//	int i = 0;
//	while (i < 3480) {
//		printf("%c", game_view[i]);
//		i++;
//	}
//	cout << endl;
//	cout.flush();
//}

void SetPlayerCoord() {
	player.y = player.position / 120;
	player.x = player.position - 120 * player.y;
}

void InitPlayer() {
	game_view[room1.x + 3 + ((room1.y + 2) * 120)] = '@';
	player.position = room1.x + 3 + ((room1.y + 2) * 120);
}

void InitRoom(Room& p) {
	bool is_free = false;

	do {
		is_free = false;

		p.height = rand() % 6 + 6;
		p.width = rand() % 12 + 10;
		p.x = rand() % (91 - p.width) + 3;
		p.y = rand() % (21 - p.height) + 3;
		p.position = (p.y * 120) + p.x;

		for (int i = 0; i < p.height * 120; i += 120) {
			for (int j = 0; j < p.width; j++) {
				if (game_view[p.position + j + i] != ' ') is_free = true;
			}
		}
	} while (is_free);

	int i = 0;
	while (i < p.height * 120) {
		int j = 0;
		while (j < p.width) {
			if (i == 0 || i == (p.height - 1) * 120) {
				game_view[p.position + j + i] = '-';
			}
			else {
				if (j == 0 || j == p.width - 1) {
					game_view[p.position + j + i] = '|';
				}
				else {
					game_view[p.position + j + i] = '.';
				}
			}
			j++;
		}
		i += 120;
	};

	game_view[p.position] = '/';
	game_view[p.position + p.width - 1] = '\\';
	game_view[p.position + (p.height - 1) * 120] = '\\';
	game_view[p.position + p.width - 1 + (p.height - 1) * 120] = '/';
}

void InitLevel();

void Step() {

	int old_pos =  player.position;
	game_view[old_pos] = player.field_under_player;

	int key_number = 0;
	int d = _getche();
	if (d == 114) {  // R
		for (int i = 0; i < 3480; i++) {
			game_view[i] = default_game_view[i];
		}

		for (int j = 0; j < 29;) {
			lines[j] = "";
			j++;
		}
		old_pos = 0;
		player.field_under_player = '.';

		regen_lvl = true;
		return;
	}
	else if (d ==112){ // P
		if (player.potion.potion_charge != 0) {
			player.current_hp += player.potion.hp_points;
			player.current_dmg += player.potion.dmg;
			player.current_crit_chance += player.potion.crit_chance;
			player.potion.potion_charge--;
			PlayerStatsChange(game_view);
		}
	}
	else {
		key_number = _getche();

		switch (key_number)
		{
		case 72://cout << "Up" << endl;
			switch (game_view[player.position - 120])
			{
			case '.':
				player.position += -120;
				player.field_under_player = '.';
				break;
			case '$':
				player.gold_amount++;
				PlayerStatsChange(game_view);
				player.position += -120;
				player.field_under_player = '.';
				break;
			case '^':
				game_level++;
				for (int i = 0; i < 3480; i++) {
					game_view[i] = default_game_view[i];
				}

				for (int j = 0; j < 29;) {
					lines[j] = "";
					j++;
				}
				old_pos = 0;

				InitLevel();

				break;
			case '&':
				player.field_under_player = '&';
				if (item1.position == player.position - 120) {
					FoundSmth(item1);
					if (item1.position == 0)player.field_under_player = '.';
				}
				else if (item2.position == player.position - 120) {
					FoundSmth(item2);
					if (item2.position == 0)player.field_under_player = '.';
				}
				else if (item3.position == player.position - 120) {
					FoundSmth(item3);
					if (item3.position == 0)player.field_under_player = '.';
				}
				else if (item4.position == player.position - 120) {
					FoundSmth(item4);
					if (item4.position == 0)player.field_under_player = '.';
				}

				player.position += -120;
				break;
			case '+':
				overwrite_field = true;
				if (player.field_under_player == '.' && game_view[player.position - 120 * 2] == '+') {
					player.position += -120 * 3;
					player.field_under_player = '.';
					break;
				}
				else if (player.field_under_player == '#') {
					player.position += -120 * 2;
					player.field_under_player = '.';
					break;
				}
				else if (player.field_under_player == '.') {
					player.position += -120 * 2;
					player.field_under_player = '#';
					break;
				}
				break;
			case '#':
				player.position += -120;
				player.field_under_player = '#';
				break;
			}
			break;

		case 77://cout << "Right" << endl;
			switch (game_view[player.position + 1])
			{
			case '.':
				player.position += 1;
				player.field_under_player = '.';
				break;
			case '$':
				player.gold_amount++;
				PlayerStatsChange(game_view);

				player.position += 1;
				player.field_under_player = '.';
				break;
			case '^':
				game_level++;
				for (int i = 0; i < 3480; i++) {
					game_view[i] = default_game_view[i];
				}

				for (int j = 0; j < 29;) {
					lines[j] = "";
					j++;
				}
				old_pos = 0;

				InitLevel();

				break;
			case '&':
				player.field_under_player = '&';
				if (item1.position == player.position + 1) {
					FoundSmth(item1);
					if (item1.position == 0)player.field_under_player = '.';
				}
				else if (item2.position == player.position + 1) {
					FoundSmth(item2);
					if (item2.position == 0)player.field_under_player = '.';
				}
				else if (item3.position == player.position + 1) {
					FoundSmth(item3);
					if (item3.position == 0)player.field_under_player = '.';
				}
				else if (item4.position == player.position + 1) {
					FoundSmth(item4);
					if (item4.position == 0)player.field_under_player = '.';
				}

				player.position += 1;
				break;
			case '+':
				overwrite_field = true;
				if (player.field_under_player == '.' && game_view[player.position + 1 * 2] == '+') {
					player.position += 1 * 3;
					player.field_under_player = '.';
					break;
				}
				else if (player.field_under_player == '.') {
					player.position += 1 * 2;
					player.field_under_player = '#';
					break;
				}
				else if (player.field_under_player == '#') {
					player.position += 1 * 2;
					player.field_under_player = '.';
					break;
				}
				break;
			case '#':
				player.position += 1;
				player.field_under_player = '#';
				break;
			}
			break;

		case 80://cout << "Down" << endl;
			switch (game_view[player.position + 120])
			{
			case '.':
				player.position += 120;
				player.field_under_player = '.';
				break;
			case '$':
				player.gold_amount++;
				PlayerStatsChange(game_view);

				player.position += 120;
				player.field_under_player = '.';
				break;
			case '^':
				game_level++;
				for (int i = 0; i < 3480; i++) {
					game_view[i] = default_game_view[i];
				}

				for (int j = 0; j < 29;) {
					lines[j] = "";
					j++;
				}
				old_pos = 0;

				InitLevel();

				break;
			case '&':
				player.field_under_player = '&';
				if (item1.position == player.position + 120) {
					FoundSmth(item1);
					if (item1.position == 0)player.field_under_player = '.';
				}
				else if (item2.position == player.position + 120) {
					FoundSmth(item2);
					if (item2.position == 0)player.field_under_player = '.';
				}
				else if (item3.position == player.position + 120) {
					FoundSmth(item3);
					if (item3.position == 0)player.field_under_player = '.';
				}
				else if (item4.position == player.position + 120) {
					FoundSmth(item4);
					if (item4.position == 0)player.field_under_player = '.';
				}

				player.position += 120;
				break;
			case '+':
				overwrite_field = true;
				if (player.field_under_player == '.' && game_view[player.position + 120 * 2] == '+') {
					player.position += 120 * 3;
					player.field_under_player = '.';
					break;
				}
				else if (player.field_under_player == '.') {
					player.position += 120 * 2;
					player.field_under_player = '#';
					break;
				}
				else if (player.field_under_player == '#') {
					player.position += 120 * 2;
					player.field_under_player = '.';
					break;
				}
				break;
			case '#':
				player.position += 120;
				player.field_under_player = '#';
				break;
			}
			break;

		case 75://cout << "Left" << endl;
			switch (game_view[player.position - 1])
			{
			case '.':
				player.position += -1;
				player.field_under_player = '.';
				break;
			case '$':
				player.gold_amount++;
				PlayerStatsChange(game_view);

				player.position += -1;
				player.field_under_player = '.';
				break;
			case '^':
				game_level++;
				for (int i = 0; i < 3480; i++) {
					game_view[i] = default_game_view[i];
				}

				for (int j = 0; j < 29;) {
					lines[j] = "";
					j++;
				}
				old_pos = 0;

				InitLevel();

				break;
			case '&':
				player.field_under_player = '&';
				if (item1.position == player.position - 1) {
					FoundSmth(item1);
					if (item1.position == 0)player.field_under_player = '.';
				}
				else if (item2.position == player.position - 1) {
					FoundSmth(item2);
					if (item2.position == 0)player.field_under_player = '.';
				}
				else if (item3.position == player.position - 1) {
					FoundSmth(item3);
					if (item3.position == 0)player.field_under_player = '.';
				}
				else if (item4.position == player.position - 1) {
					FoundSmth(item4);
					if (item4.position == 0)player.field_under_player = '.';
				}

				player.position += -1;
				break;
			case '+':
				overwrite_field = true;
				if (player.field_under_player == '.' && game_view[player.position - 1 * 2] == '+') {
					player.position += -1 * 3;
					player.field_under_player = '.';
					break;
				}
				else if (player.field_under_player == '.') {
					player.position += -1 * 2;
					player.field_under_player = '#';
					break;
				}
				else if (player.field_under_player == '#') {
					player.position += -1 * 2;
					player.field_under_player = '.';
					break;
				}
				break;
			case '#':
				player.position += -1;
				player.field_under_player = '#';
				break;
			}
			break;
		case 112:
			if (player.potion.potion_charge != 0) {
				player.current_hp += player.potion.hp_points;
				player.current_dmg += player.potion.dmg;
				player.current_crit_chance += player.potion.crit_chance;
				player.potion.potion_charge--;
				PlayerStatsChange(game_view);
			}
			break;
		}
	}
	
	game_view[player.position] = '@';

	SetPlayerCoord();

	if (CheckField(room1, player.position)) { player.room_index = 1; }
	else if (CheckField(room2, player.position)) { player.room_index = 2; }
	else if (CheckField(room3, player.position)) { player.room_index = 3; }
	else if (CheckField(room4, player.position)) { player.room_index = 4; }
	else { player.room_index = -1; }
}

void CheckAccessToPlayer(Room& r) {
	if (r.r_index == 1) {
		r.have_access_to_player = true;
		if (r.doors[1]) { 
			room2.have_access_to_player = true; 
			CheckAccessToPlayer(room2);
		};
		if (r.doors[2]) { 
			room3.have_access_to_player = true;
			CheckAccessToPlayer(room3);
		};
		if (r.doors[3]) { 
			room4.have_access_to_player = true;
			CheckAccessToPlayer(room4);
		};
	}
	else if (r.have_access_to_player){
		if (r.doors[1]) { 
			room2.have_access_to_player = true;
		};
		if (r.doors[2]) { 
			room3.have_access_to_player = true;
		};
		if (r.doors[3]) { 
			room4.have_access_to_player = true;
		};
	}
 }

void VerHorLines(int* array, int point) {
	int x, y;
	GetXY(&x,&y,point);
	for (int i = 1; i < 98; i++) { // horizontal lines
		array[i] = y * 120 + i;
	}

	for (int i = 1; i < 28; i++) { // vertical lines
		array[i + 97] = x + i * 120;
	}
}

void DrawConnection(int point1, int point2);

bool DrawConnection(int point1, int point2, Room& r1, Room& r2, Room& r3, Room& r4) {
	//cout << "DrawConnection(point1,point2,rooms: " << r1.r_index << r2.r_index << endl;
	if (CheckField(r3,point1,point2) == false && CheckField(r4, point1, point2) == false) {
		int x1, x2, y1, y2;
		GetXY(&x1, &y1, point1);
		GetXY(&x2, &y2, point2);
		if (x1 == x2 || y1 == y2) {
			DrawConnection(point1, point2);
			r1.doors[r2.r_index - 1] = true;
			r2.doors[r1.r_index - 1] = true;
			std::cout << "DrawConnection(point1,point2,rooms: " << r1.r_index << r2.r_index << endl;
			//cout << "DrawConnection(p1,p2,r1,r2,r3,r4) return true" << endl;
			return true;
		}
		else {
			//cout << "DrawConnection(p1,p2,r1,r2,r3,r4) return false" << endl;
			return false;
		}
	}
	//cout << "DrawConnection(p1,p2,r1,r2,r3,r4) return false" << endl;
	return false;
}

bool DrawConnection(int point1, int point2, Room& r1, Room& r2) {
	//cout << "DrawConnection" << endl;
	bool result = false;
	switch (r1.r_index)
	{
	case 1:
		switch (r2.r_index)
		{
		case 2:
			result = (DrawConnection(point1, point2, r1, r2, room3, room4)) ? true : false;
			break;
		case 3:
			result = (DrawConnection(point1, point2, r1, r2, room2, room4)) ? true : false;
			break;
		case 4:
			result = (DrawConnection(point1, point2, r1, r2, room2, room3)) ? true : false;
			break;
		}
		break;
	case 2:
		switch (r2.r_index)
		{
		case 1:
			result = (DrawConnection(point1, point2, r1, r2, room3, room4)) ? true : false;
			break;
		case 3:
			result = (DrawConnection(point1, point2, r1, r2, room1, room4)) ? true : false;
			break;
		case 4:
			result = (DrawConnection(point1, point2, r1, r2, room1, room3)) ? true : false;
			break;
		}
		break;
	case 3:
		switch (r2.r_index)
		{
		case 1:
			result = (DrawConnection(point1, point2, r1, r2, room2, room4)) ? true : false;
			break;
		case 2:
			result = (DrawConnection(point1, point2, r1, r2, room1, room4)) ? true : false;
			break;
		case 4:
			result = (DrawConnection(point1, point2, r1, r2, room1, room2)) ? true : false;
			break;
		}
		break;
	case 4:
		switch (r2.r_index)
		{
		case 1:
			result = (DrawConnection(point1, point2, r1, r2, room2, room3)) ? true : false;
			break;
		case 2:
			result = (DrawConnection(point1, point2, r1, r2, room1, room3)) ? true : false;
			break;
		case 3:
			result = (DrawConnection(point1, point2, r1, r2, room1, room2)) ? true : false;
			break;
		}
		break;
	}
	return result;
}

void DrawConnection(int point1, int point2) {  
	int x1, y1, x2, y2;
	GetXY(&x1, &y1, point1);
	GetXY(&x2, &y2, point2);

	if (y1 == y2) {  // if same vertical lvl
		if (x1 < x2) {
			for (int i = 0; i < x2 - x1; i++) {
				if (game_view[i + x1 + (y1 * 120)] != '.') {
					if (game_view[i + x1 + (y1 * 120)] == '|') {
						game_view[i + x1 + (y1 * 120)] = '+';
					}
					if (game_view[i + x1 + (y1 * 120)] == ' ') {
						game_view[i + x1 + (y1 * 120)] = '#';
					}
				}
			}
		}
		else {
			for (int i = 0; i < x1 - x2; i++) {
				if (game_view[i + x2 + (y2 * 120)] != '.') {
					if (game_view[i + x2 + (y2 * 120)] == '|') {
						game_view[i + x2 + (y2 * 120)] = '+';
					}
					if (game_view[i + x2 + (y2 * 120)] == ' ') {
						game_view[i + x2 + (y2 * 120)] = '#';
					}
				}
			}
		}
	}
	else if(x1==x2){
		if (y1 < y2) {
			for (int i = 0; i < y2 - y1; i++) {
				if (game_view[(i + y1) * 120 + x1] != '.') {
					if (game_view[(i + y1) * 120 + x1] == '-') {
						game_view[(i + y1) * 120 + x1] = '+';
					}
					if (game_view[(i + y1) * 120 + x1] == ' ') {
						game_view[(i + y1) * 120 + x1] = '#';
					}
				}
			}
		}
		else {
			for (int i = 0; i < y1 - y2; i++) {
				if (game_view[(i + y2) * 120 + x2] != '.') {
					if (game_view[(i + y2) * 120 + x2] == '-') {
						game_view[(i + y2) * 120 + x2] = '+';
					}
					if (game_view[(i + y2) * 120 + x2] == ' ') {
						game_view[(i + y2) * 120 + x2] = '#';
					}
				}
			}
		}
	}
	else {
		std::cout << "x1!=x2, y1!=y2" << endl;
	}
}

void InitNearDoors(Room& p);

bool DrawNotStraightCorridor(Room& r1, Room& r2, Room& r3, Room& r4) {
	int r1_center, r2_center;
	bool returing_value = false;
	r1_center = r1.x + r1.width / 2 + (r1.y + r1.height / 2) * 120;
	r2_center = r2.x + r2.width / 2 + (r2.y + r2.height / 2) * 120;

	int door_pos = (r1.x + r1.width / 2) + (r2.y + r2.height / 2) * 120;
	int door_lines[125];
	VerHorLines(door_lines, door_pos);

	if (r1.r_index == 0) {
		std::cout << "Indexes: " << r2.r_index << r3.r_index << r4.r_index << endl;
	}
	if (r2.r_index == 0) {
		std::cout << "Indexes: " << r1.r_index << r3.r_index << r4.r_index << endl;
	}

	if (!CheckField(room3, door_pos, r1_center) && !CheckField(r3, door_pos, r2_center) &&
		!CheckField(r4, door_pos, r1_center) && !CheckField(r4, door_pos, r2_center) &&
		!CheckField(r1, door_pos) && !CheckField(r2, door_pos) &&
		!CheckField(r3, door_pos) && !CheckField(r4, door_pos)) {
		DrawConnection(door_pos, r1_center, r1, r2);
		DrawConnection(door_pos, r2_center, r1, r2);
		game_view[door_pos] = '#';
		if (r1.r_index != 0 && r2.r_index != 0) {//never happend but VS dont like that r_index can be 0
			r1.doors[r2.r_index - 1] = true;
			r2.doors[r1.r_index - 1] = true;
		}
	}
	else {
		door_pos = (r2.x + r2.width / 2) + ((r1.y + r1.height / 2) * 120);
		int door_lines[125];
		VerHorLines(door_lines, door_pos);
		if (!CheckField(r3, door_pos, r1_center) && !CheckField(r3, door_pos, r2_center) &&
			!CheckField(r4, door_pos, r1_center) && !CheckField(r4, door_pos, r2_center) &&
			!CheckField(r1, door_pos) && !CheckField(r2, door_pos) &&
			!CheckField(r3, door_pos) && !CheckField(r4, door_pos)) {
			DrawConnection(door_pos, r1_center, r1, r2);
			DrawConnection(door_pos, r2_center, r1, r2);
			game_view[door_pos] = '#';
			if (r1.r_index != 0 && r2.r_index != 0) {//never happend but VS dont like that r_index can be 0
				r1.doors[r2.r_index - 1] = true;
				r2.doors[r1.r_index - 1] = true;
			}
		}
		else {
			//cout << "DrawNotStraightCorridor betwen room" << r1.r_index<< " and room" << r2.r_index<< " return: " << false << endl;
			return false;
		}
	}
	std::cout << "DrawNotStraightCorridor betwen room" << r1.r_index<< " and room" << r2.r_index<< " return: " << true << endl;
	return true;
}

void InitDoors() {
	std::cout << "InitDoors ------------------------------------------------------" << endl;
	int room1_center, room2_center, room3_center, room4_center;

	room1_center = room1.x + room1.width / 2 + (room1.y + room1.height / 2) * 120;
	room2_center = room2.x + room2.width / 2 + (room2.y + room2.height / 2) * 120;
	room3_center = room3.x + room3.width / 2 + (room3.y + room3.height / 2) * 120;
	room4_center = room4.x + room4.width / 2 + (room4.y + room4.height / 2) * 120;

	int room1_lines[125], room2_lines[125], room3_lines[125], room4_lines[125];

	VerHorLines(room1_lines, room1_center);
	VerHorLines(room2_lines, room2_center);
	VerHorLines(room3_lines, room3_center);
	VerHorLines(room4_lines, room4_center);

	int inters_point1 = -1, inters_point2 = -1, inters_point3 = -1, inters_point4 = -1;

	bool room1_without_door = true, room2_without_door = true, room3_without_door = true, room4_without_door = true;

	// lines from 1 room
	for (int i = 1; i < 125; i++) {
		if (game_view[room1_lines[i]] == '.') {
			if (CheckField(room1, room1_lines[i])) {
				inters_point1 = room1_lines[i];
			}
			if (CheckField(room2, room1_lines[i])) {
				inters_point2 = room1_lines[i];
			}
			if (CheckField(room3, room1_lines[i])) {
				inters_point3 = room1_lines[i];
			}
			if (CheckField(room4, room1_lines[i])) {
				inters_point4 = room1_lines[i];
			}
		}
		if (inters_point1 != -1 && inters_point2 != -1) {
			DrawConnection(inters_point1, inters_point2, room1, room2);
			inters_point1 = -1;
			inters_point2 = -1;
		}
		if (inters_point1 != -1 && inters_point3 != -1) {
			DrawConnection(inters_point1, inters_point3, room1, room3);
			inters_point1 = -1;
			inters_point3 = -1;
		}
		if (inters_point1 != -1 && inters_point4 != -1) {
			DrawConnection(inters_point1, inters_point4, room1, room4);
			inters_point1 = -1;
			inters_point4 = -1;
		}
	}

	inters_point1 = -1;
	inters_point2 = -1;
	inters_point3 = -1;
	inters_point4 = -1;

	// if all rooms have door
	for (int i = 0; i < 4; i++) {
		if (room1.doors[i]) {
			room1_without_door = false;
		}
		if (room2.doors[i]) {
			room2_without_door = false;
		}
		if (room3.doors[i]) {
			room3_without_door = false;
		}
		if (room4.doors[i]) {
			room4_without_door = false;
		}
	}

	// lines from 2 room
	for (int i = 1; i < 125; i++) {
		if (game_view[room2_lines[i]] == '.') {
			if (CheckField(room2, room2_lines[i])) {
				inters_point2 = room2_lines[i];
			}
			if (CheckField(room3, room2_lines[i])) {
				inters_point3 = room2_lines[i];
			}
			if (CheckField(room4, room2_lines[i])) {
				inters_point4 = room2_lines[i];
			}
			if (room1_without_door) {
				if (CheckField(room1, room2_lines[i])) {
					inters_point1 = room2_lines[i];
				}
			}
		}
		if (inters_point2 != -1 && inters_point3 != -1) {
			//cout << "int_point23: " << inters_point3 << endl;
			DrawConnection(inters_point2, inters_point3, room2, room3);
			inters_point2 = -1;
			inters_point3 = -1;
		}
		if (inters_point2 != -1 && inters_point4 != -1) {
			//cout << "int_point24: " << inters_point4 << endl;
			DrawConnection(inters_point2, inters_point4, room2, room4);
			inters_point2 = -1;
			inters_point4 = -1;
		}
		if (inters_point2 != -1 && inters_point1 != -1) {
			//cout << "int_point21: " << inters_point1 << endl;
			DrawConnection(inters_point2, inters_point1, room2, room1);
			inters_point2 = -1;
			inters_point1 = -1;
		}
	}

	inters_point1 = -1;
	inters_point2 = -1;
	inters_point3 = -1;
	inters_point4 = -1;

	// if all rooms have door
	for (int i = 0; i < 4; i++) {
		if (room1.doors[i]) {
			room1_without_door = false;
		}
		if (room2.doors[i]) {
			room2_without_door = false;
		}
		if (room3.doors[i]) {
			room3_without_door = false;
		}
		if (room4.doors[i]) {
			room4_without_door = false;
		}
	}

	// lines from 3 room
	for (int i = 1; i < 125; i++) {
		if (game_view[room3_lines[i]] == '.') {
			if (CheckField(room3, room3_lines[i])) {
				inters_point3 = room3_lines[i];
			}
			if (CheckField(room4, room3_lines[i])) {
				inters_point4 = room3_lines[i];
			}
			if (room1_without_door) {
				if (CheckField(room1, room3_lines[i])) {
					inters_point1 = room3_lines[i];
				}
			}
			if (room2_without_door) {
				if (CheckField(room2, room3_lines[i])) {
					inters_point2 = room3_lines[i];
				}
			}
		}
		if (inters_point3 != -1 && inters_point4 != -1) {
			//cout << "int_point34: " << inters_point4 << endl;
			DrawConnection(inters_point3, inters_point4, room3, room4);
			inters_point3 = -1;
			inters_point4 = -1;
		}
		if (inters_point3 != -1 && inters_point1 != -1) {
			//cout << "int_point31: " << inters_point1 << endl;
			DrawConnection(inters_point3, inters_point1, room3, room1);
			inters_point3 = -1;
			inters_point1 = -1;
		}
		if (inters_point3 != -1 && inters_point2 != -1) {
			//cout << "int_point32: " << inters_point2 << endl;
			DrawConnection(inters_point3, inters_point2, room3, room2);
			inters_point3 = -1;
			inters_point2 = -1;
		}
	}

	inters_point1 = -1;
	inters_point2 = -1;
	inters_point3 = -1;
	inters_point4 = -1;

	// if all rooms have door
	for (int i = 0; i < 4; i++) {
		if (room1.doors[i]) {
			room1_without_door = false;
		}
		if (room2.doors[i]) {
			room2_without_door = false;
		}
		if (room3.doors[i]) {
			room3_without_door = false;
		}
		if (room4.doors[i]) {
			room4_without_door = false;
		}
	}

	// lines from 4 room
	for (int i = 1; i < 124; i++) {
		if (game_view[room4_lines[i]] == '.') {
			if (CheckField(room4, room4_lines[i])) {
				inters_point4 = room4_lines[i];
			}
			if (room3_without_door) {
				if (CheckField(room3, room4_lines[i])) {
					inters_point3 = room4_lines[i];
				}
			}
			if (room1_without_door) {
				if (CheckField(room1, room4_lines[i])) {
					inters_point1 = room4_lines[i];
				}
			}
			if (room2_without_door) {
				if (CheckField(room2, room4_lines[i])) {
					inters_point2 = room4_lines[i];
				}
			}
		}
		if (inters_point4 != -1 && inters_point3 != -1) {
			//cout << "int_point43: " << inters_point3 << endl;
			DrawConnection(inters_point4, inters_point3, room4, room3);
			inters_point4 = -1;
			inters_point3 = -1;
		}
		if (inters_point4 != -1 && inters_point1 != -1) {
			//cout << "int_point41: " << inters_point1 << endl;
			DrawConnection(inters_point4, inters_point1, room4, room1);
			inters_point4 = -1;
			inters_point1 = -1;
		}
		if (inters_point4 != -1 && inters_point2 != -1) {
			//cout << "int_point42: " << inters_point2 << endl;
			DrawConnection(inters_point4, inters_point2, room4, room2);
			inters_point4 = -1;
			inters_point2 = -1;
		}
	}

	InitNearDoors(room1);
	InitNearDoors(room2);
	InitNearDoors(room3);
	InitNearDoors(room4);

	// if all rooms have door
	for (int i = 0; i < 4; i++) {
		if (room1.doors[i]) {
			room1_without_door = false;
		}
		if (room2.doors[i]) {
			room2_without_door = false;
		}
		if (room3.doors[i]) {
			room3_without_door = false;
		}
		if (room4.doors[i]) {
			room4_without_door = false;
		}
	}

	std::cout << "Doesnt have doors phase" << endl;
	if (room1_without_door) {
		
		if (DrawNotStraightCorridor(room1, room2, room3, room4) == true && room1_without_door) {
			room1_without_door = false;
		}
		else if (DrawNotStraightCorridor(room1, room3, room2, room4) == true && room1_without_door) {
			room1_without_door = false;
		}
		else if (DrawNotStraightCorridor(room1, room4, room2, room3) == true && room1_without_door) {
			room1_without_door = false;
		}

	}

	if (room1_without_door) {
		std::cout << "___ Room1 doesnot have door ___" <<  endl;
		regen_lvl = true;
	}

	if (room2_without_door) {
		
		if (DrawNotStraightCorridor(room2, room3, room1, room4) && room2_without_door) {
			room2_without_door = false;
		}
		else if (DrawNotStraightCorridor(room2, room4, room1, room3) && room2_without_door) {
			room2_without_door = false;
		}
		else if (DrawNotStraightCorridor(room2, room1, room3, room4) && room2_without_door) {
			room2_without_door = false;
		}

		if (room2_without_door) {
			std::cout << "___ Room2 doesnot have door ___" << endl;
			regen_lvl = true;
		}
	}

	if (room3_without_door) {
		
		if (DrawNotStraightCorridor(room3, room4, room1, room2) && room3_without_door) {
			room3_without_door = false;
		}
		else if (DrawNotStraightCorridor(room3, room2, room1, room4) && room3_without_door) {
			room3_without_door = false;
		}
		else if (DrawNotStraightCorridor(room3, room1, room2, room4) && room3_without_door) {
			room3_without_door = false;
		}

		if (room3_without_door) {
			std::cout << "___ Room3 doesnot have door ___" << endl;
			regen_lvl = true;
		}
	}

	if (room4_without_door) {
		if (DrawNotStraightCorridor(room4, room1, room2, room3) && room4_without_door) {
			room4_without_door = false;
		}
		else if (DrawNotStraightCorridor(room4, room2, room1, room3) && room4_without_door) {
			room4_without_door = false;
		}
		else if (DrawNotStraightCorridor(room4, room3, room1, room2) && room4_without_door) {
			room4_without_door = false;
		}

		if (room4_without_door) {
			std::cout << "___ Room4 doesnot have door ___" << endl;
			regen_lvl = true;
		}
	}

	CheckAccessToPlayer(room1);
	CheckAccessToPlayer(room2);
	CheckAccessToPlayer(room3);
	CheckAccessToPlayer(room4);


	std::cout << "Doesnt have access to player phase" << endl;
	if (!room2.have_access_to_player) {

		if (DrawNotStraightCorridor(room2, room1, room3, room4) && !room2.have_access_to_player) {
			room2_without_door = false;
		}

		if (DrawNotStraightCorridor(room2, room3, room1, room4) && !room2.have_access_to_player && !room3.have_access_to_player) {
			room2_without_door = false;
		}

		if (DrawNotStraightCorridor(room2, room4, room1, room3) && !room2.have_access_to_player && !room4.have_access_to_player) {
			room2_without_door = false;
		}

		if (!room2.have_access_to_player) {
			std::cout << "___ Room2 doesnot have access to player ___" << endl;
			regen_lvl = true;
		}
	}

	CheckAccessToPlayer(room1);
	CheckAccessToPlayer(room2);
	CheckAccessToPlayer(room3);
	CheckAccessToPlayer(room4);

	if (!room3.have_access_to_player) {

		if (DrawNotStraightCorridor(room3, room1, room2, room4) && !room3.have_access_to_player) {
			room3_without_door = false;
		}

		if (DrawNotStraightCorridor(room3, room2, room1, room4) && !room3.have_access_to_player && !room2.have_access_to_player) {
			room3_without_door = false;
		}

		if (DrawNotStraightCorridor(room3, room4, room1, room2) && !room3.have_access_to_player && !room4.have_access_to_player) {
			room3_without_door = false;
		}

		if (!room3.have_access_to_player) {
			std::cout << "___ Room3 doesnot have access to player ___" << endl;
			regen_lvl = true;
		}
	}

	CheckAccessToPlayer(room1);
	CheckAccessToPlayer(room2);
	CheckAccessToPlayer(room3);
	CheckAccessToPlayer(room4);

	if (!room4.have_access_to_player) {

		if (DrawNotStraightCorridor(room4, room1, room2, room3) && !room4.have_access_to_player) {
			room4_without_door = false;
		}

		if (DrawNotStraightCorridor(room4, room2, room1, room3) && !room4.have_access_to_player && !room2.have_access_to_player) {
			room4_without_door = false;
		}

		if (DrawNotStraightCorridor(room4, room3, room1, room2) && !room4.have_access_to_player && !room3.have_access_to_player) {
			room4_without_door = false;
		}

		if (!room4.have_access_to_player) {
			std::cout << "___ Room4 doesnot have access to player ___" << endl;
			regen_lvl = true;
		}
	}

	std::cout << room1.doors[0] << room1.doors[1] << room1.doors[2] << room1.doors[3] << endl;
	std::cout << room2.doors[0] << room2.doors[1] << room2.doors[2] << room2.doors[3] << endl;
	std::cout << room3.doors[0] << room3.doors[1] << room3.doors[2] << room3.doors[3] << endl;
	std::cout << room4.doors[0] << room4.doors[1] << room4.doors[2] << room4.doors[3] << endl;

	if (!room2.have_access_to_player || !room3.have_access_to_player || !room4.have_access_to_player) {
		regen_lvl = true;
	}

	std::cout << "InitDoors end -------------------------------" << endl;
}

void InitNearDoors(Room& p) {
	//top side
	for (int i = 1; i < p.width - 1; i++) {
		if (game_view[i + p.position - 120] == '-') {
			game_view[i + p.position] = '+';
			game_view[i + p.position - 120] = '+';
			if (CheckField(room1, i + p.position - 120 + 1)) {
				room1.doors[p.r_index - 1] = true;
				p.doors[0] = true;
			}
			else if (CheckField(room2, i + p.position - 120 + 1)) {
				room2.doors[p.r_index - 1] = true;
				p.doors[1] = true;
			}
			else if (CheckField(room3, i + p.position - 120 + 1)) {
				room3.doors[p.r_index - 1] = true;
				p.doors[2] = true;
			}
			else if (CheckField(room4, i + p.position - 120 + 1)) {
				room4.doors[p.r_index - 1] = true;
				p.doors[3] = true;
			}
			break;
		}
	}
	//right side
	for (int i = 120; i < (p.height - 1) * 120; i += 120) {
		if (game_view[i + p.position + p.width] == '|') {
			game_view[i + p.position + p.width - 1] = '+';
			game_view[i + p.position + p.width] = '+';
			if (CheckField(room1, i + p.position + p.width)) {
				room1.doors[p.r_index - 1] = true;
				p.doors[0] = true;
			}
			else if (CheckField(room2, i + p.position + p.width)) {
				room2.doors[p.r_index - 1] = true;
				p.doors[1] = true;
			}
			else if (CheckField(room3, i + p.position + p.width)) {
				room3.doors[p.r_index - 1] = true;
				p.doors[2] = true;
			}
			else if (CheckField(room4, i + p.position + p.width)) {
				room4.doors[p.r_index - 1] = true;
				p.doors[3] = true;
			}
			//cout << "Zmiany po prawej stronie" << endl;
			break;
		}
	}
}

void FieldsAmount(Room& p) {
	int ploszcza = p.height * p.width;
	int i = 0;
	int wskaznik = p.position;
	int kol = 0;
	while (i != ploszcza) {
		if (kol == p.width) {
			wskaznik += -p.width + 120;
			kol = 0;
		}
		p.fields[i] = wskaznik;
		kol++;
		wskaznik++;
		i++;
	}
}

void InitLevel() {
	//set game param to default (for new level init)
	for (int i = 0; i < 3600; i++) {
		game_view[i] = default_game_view[i];
	}

	SetCurrentStats();

	room1.have_access_to_player = false;
	room2.have_access_to_player = false;
	room3.have_access_to_player = false;
	room4.have_access_to_player = false;

	for (int i = 0; i < 4; i++) {
		room1.doors[i] = false;
	}
	for (int i = 0; i < 4; i++) {
		room2.doors[i] = false;
	}
	for (int i = 0; i < 4; i++) {
		room3.doors[i] = false;
	}
	for (int i = 0; i < 4; i++) {
		room4.doors[i] = false;
	}

	for (int i = 0; i < 3480; i++) {
		game_view[i] = default_game_view[i];
	}

	for (int j = 0; j < 29;) {
		lines[j] = "";
		j++;
	}
	player.field_under_player = '.';

	overwrite_field = true;
	regen_lvl = false;

	player.potion.potion_charge = 2;

	PlayerStatsChange(game_view);
	//
	
	InitRoom(room1);
	InitRoom(room2);
	InitRoom(room3);
	InitRoom(room4);
	FieldsAmount(room1);
	FieldsAmount(room2);
	FieldsAmount(room3);
	FieldsAmount(room4);
	InitDoors();

	if (!regen_lvl) {
		SpawnLoot(room1, &item1);
		SpawnLoot(room2, &item2);
		SpawnLoot(room3, &item3);
		SpawnLoot(room4, &item4);
		SpawnNextLvlDoor();
		PlayerStatsChange(game_view);
		SpawnEnemy();
		InitPlayer();
	}

	//SpawnLoot(room1, &item1);
	//SpawnLoot(room2, &item2);
	//SpawnLoot(room3, &item3);
	//SpawnLoot(room4, &item4);
	//SpawnNextLvlDoor();
	//PlayerStatsChange(game_view);
	//SpawnEnemy();
	//InitPlayer();

	Show(game_view);
}

void FoundSmth(Item item) { // type: sword, ring, potion, armor
	char message_view[3600];
	int i = 0;
	for (i;  i < 1200; i++) {
		message_view[i] = empty_view[i];
	}
	char message_start[3 * 120] = {
		'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
		'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
		'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ',' ',' ','Y','o','u',' ','h','a','v','e',' ','f','o','u','n','d',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	};

	char message_end[5 * 120] = {
		'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
		'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ',' ',' ','W','a','n','t',' ','t','o',' ','e','q','u','i','p','?',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
		'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ',' ','Y','e','s','[','E','n','t','e','r',']',' ','N','o','[','E','s','c',']',' ',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
		'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
		'|',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','|',' ',
	};
	
	MergeArrays(message_view, 1200, message_start, 3 * 120);

	char part1[53] = { '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };

	MergeArrays(message_view, 1200 + (3 * 120), part1, 53);

	if (item.type == "sword") {
		char part2[13] = {  'S', 'w', 'o', 'r', 'd', ' ', ' ', ' ', 'L', 'v', 'l', '.', ' ' };
		MergeArrays(message_view, 1200 + (3 * 120) + 53, part2, 13);

		std::stringstream ss;			// converting int to char
		ss << item.level;
		string out_string = ss.str();
		char part3 = out_string[0];
		char part32 = out_string[1];
		if (part32 == NULL)part32 = ' ';

		MergeArrays(message_view, 1200 + (3 * 120) + 53 + 13, part3);
		MergeArrays(message_view, 1200 + (3 * 120) + 53 + 14, part32);
		char part4[53] { ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', ' ' };
		MergeArrays(message_view, 1200 + (3 * 120) + 53 + 14 + 1, part4, 56);
	}
	else if (item.type == "ring") {
		char part2[13]{ 'R', 'i', 'n', 'g', ' ', ' ', ' ', ' ', 'L', 'v', 'l', '.', ' ' };
		MergeArrays(message_view, 1200 + (3 * 120) + 53, part2, 13);

		std::stringstream ss;			// converting int to char
		ss << item.level;
		string out_string = ss.str();
		char part3 = out_string[0];
		char part32 = out_string[1];
		if (part32 == NULL)part32 = ' ';

		MergeArrays(message_view, 1200 + (3 * 120) + 53 + 13, part3);
		MergeArrays(message_view, 1200 + (3 * 120) + 53 + 14, part32);
		char part4[53]{  ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', ' ' };
		MergeArrays(message_view, 1200 + (3 * 120) + 53 + 14 + 1, part4, 56);
	}
	else if (item.type == "armor") {
		char part2[13]{ 'A', 'r', 'm', 'o', 'r', ' ', ' ', ' ', 'L', 'v', 'l', '.', ' ' };
		MergeArrays(message_view, 1200 + (3 * 120) + 53, part2, 13);

		std::stringstream ss;			// converting int to char
		ss << item.level;
		string out_string = ss.str();
		char part3 = out_string[0];
		char part32 = out_string[1];
		if (part32 == NULL)part32 = ' ';

		MergeArrays(message_view, 1200 + (3 * 120) + 53 + 13, part3);
		MergeArrays(message_view, 1200 + (3 * 120) + 53 + 14, part32);
		char part4[53]{ ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', ' ' };
		MergeArrays(message_view, 1200 + (3 * 120) + 53 + 14 + 1, part4, 56);
	}
	else if (item.type == "potion") {
		char part2[13]{ 'P', 'o', 't', 'i', 'o', 'n', ' ', ' ', 'L', 'v', 'l', '.', ' ' };
		MergeArrays(message_view, 1200 + (3 * 120) + 53, part2, 13);

		std::stringstream ss;			// converting int to char
		ss << item.level;
		string out_string = ss.str();
		char part3 = out_string[0];
		char part32 = out_string[1];
		if (part32 == NULL)part32 = ' ';

		MergeArrays(message_view, 1200 + (3 * 120) + 53 + 13, part3);
		MergeArrays(message_view, 1200 + (3 * 120) + 53 + 14, part32);
		char part4[53]{ ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', ' ' };
		MergeArrays(message_view, 1200 + (3 * 120) + 53 + 14 + 1, part4, 56);
	}
	else {
		std::cout << "Smth wrong here" << endl;
		std::cout << "Item type: " << item.type << endl;
	}

	if (item.dmg != 0) {
		char part5[66]{ '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'm', 'g', ' ', '+',' ' };

		std::stringstream ss;
		ss << item.dmg;
		string out_string = ss.str();
		char part6 = out_string[0];
		char part62 = out_string[1];
		if (part62 == NULL)part62 = ' ';

		char part7[52]{ ' ', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', ' '};
		MergeArrays(message_view, 1200 + (3 * 120) + 120, part5, 66);
		MergeArrays(message_view, 1200 + (3 * 120) + 120 + 66, part6);
		MergeArrays(message_view, 1200 + (3 * 120) + 120 + 67, part62);
		MergeArrays(message_view, 1200 + (3 * 120) + 120 + 68, part7, 53);
	}
	else if (item.crit_chance != 0) {
		char part5[67]{ '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'r', 'i', 't', ' ', '+', ' ' };

		std::stringstream ss;
		ss << item.crit_chance;
		string out_string = ss.str();
		char part6 = out_string[0];
		char part62 = out_string[1];
		if (part62 == NULL)part62 = ' ';

		char part7[51]{'%', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|' , ' ' };
		MergeArrays(message_view, 1200 + (3 * 120) + 120, part5, 67);
		MergeArrays(message_view, 1200 + (3 * 120) + 120 + 67, part6);
		MergeArrays(message_view, 1200 + (3 * 120) + 120 + 68, part62);
		MergeArrays(message_view, 1200 + (3 * 120) + 120 + 69, part7, 51);
	}
	else if (item.hp_points != 0) {
		char part5[65]{ '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'h', 'p', ' ', '+', ' ' };

		std::stringstream ss;
		ss << item.hp_points;
		string out_string = ss.str();
		char part6 = out_string[0];
		char part62 = out_string[1];
		if (part62 == NULL)part62 = ' ';

		char part7[53]{ ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', ' '};
		MergeArrays(message_view, 1200 + (3 * 120) + 120, part5, 65);
		MergeArrays(message_view, 1200 + (3 * 120) + 120 + 65, part6);
		MergeArrays(message_view, 1200 + (3 * 120) + 120 + 66, part62);
		MergeArrays(message_view, 1200 + (3 * 120) + 120 + 67, part7, 54);
	}
	MergeArrays(message_view, 1200 - 1 + (5 * 120) + 1, message_end, 5 * 120);
	MergeArrays(message_view, 1200 - 1 + (10 * 120) + 1, empty_view, 2400, 9 * 120);

	system("cls");
	for (int j = 0; j < 29; j++) {
		for (int i = 0; i < 120; i++) {
			std::cout << message_view[i + (j * 120)];
		}
		std::cout << "\n";
	}

	bool end = false;
	int key_number;
	while (!end) {

		key_number = _getche();

		switch (key_number)
		{
		case 13:// enter
			if (item.type == "sword") {
				SetCurrentStats(item);
				player.sword = item;
			}
			else if (item.type == "ring") {
				SetCurrentStats(item);
				player.ring = item;
			}
			else if (item.type == "armor") {
				SetCurrentStats(item);
				player.armor = item;
			}
			else if (item.type == "potion") {
				player.potion = item;
			}
			item.position = 0;
			end = true;
			PlayerStatsChange(game_view);
			player.field_under_player = '.';

			luck++;
			luck_opportunities++;
			break;
		case 27:// esc
			luck_opportunities++;
			player.field_under_player = '&';
			end = true;
			break;
		}
	}

	std::fill_n(message_view, 3600, NULL);
}

char battle_menu[] = {  // 29x7
	'-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
	'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|',
	'|', ' ', '[', '1', ']', 'A', 't', 't', 'a', 'c', 'k', ' ', ' ', ' ', '[', '3', ']', 'P', 'o', 's', 'i', 'o', 'n', ' ', ' ', ' ', ' ', ' ', '|',
	'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|',
	'|', ' ', '[', '2', ']', 'B', 'l', 'o', 'c', 'k', ' ', ' ', ' ', ' ', '[', '4', ']', 'T', 'r', 'y', ' ', 't', 'o', ' ', 'r', 'u', 'n', ' ', '|',
	'|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|',
	'-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'
};

string IntToString(int value, int num_amount) {
	stringstream ss;
	ss << value;
	string s;
	ss >> s;
	if (value < 10) {
		s = " " + s;
	}
	return s;
}

string IntToString(int value) {
	stringstream ss;
	ss << value;
	string s;
	ss >> s;
	return s;
}

void WinOrLoseWindow(bool win) {
	char win_or_lose_view[3600];
	for (int i = 0; i < 3600; i++) {
		win_or_lose_view[i] = empty_view[i];
	}

	char message[11*100];
	string message_text[11];
	fill_n(message_text, 11, "Q");

	message_text[0] = "You ";
	message_text[0] += (win) ? "win!!!Q" : "lose!!!Q";
	message_text[2] = "Enemy killed: " + IntToString(killed_enemies, 2);
	message_text[2] += "Q";
	message_text[4] = "Gold earned:  " + IntToString(player.gold_amount, 2);
	message_text[4] += "Q";
	message_text[6] = "Your luck:    " + IntToString((luck*100) / (luck_opportunities), 2);
	message_text[6] += "%Q";
	message_text[9] = "Want to play again?Q";
	message_text[10] = "     [Enter]Yes   [Esc]NoQ";

	int i = 0;
	std::cout << "Start" << endl;
	for (int j = 0; j < 11;) {
		bool string_end = false;
		std::cout << "j: " << j << endl;

		for (i = 0; i < 100; i++) {
			if (message_text[j][i] == 'Q') {
				string_end = true;
			}
			if (string_end) {
				break;
			}
			else {
				message[i + j * 100] = message_text[j][i];
			}
		}

		for (i; i < 100; i++) {
			message[i + j * 100] = ' ';
			if (i == 100) {
				j++;
			}
			if (i == 99) {
				j++;
			}
		}
		string_end = false;
	}

	PasteInView(message, 11, 100, 250, win_or_lose_view);
	system("cls");
	Show(win_or_lose_view);
	/*cout << "Luck: " << luck << endl;
	cout << "Luck_opp: " << luck_opportunities << endl;*/

	bool end = false;
	while (!end)
	{
		int option = _getch();

		switch (option)
		{
		case 27: //esc
			end = true;
			play = false;
			break;
		case 13: //enter
			end = true;
			regen_lvl = true;
			game_level = 1;
			luck = 0;
			luck_opportunities = 0;
			killed_enemies = 0;
			overwrite_field = true;

			player.room_index = 1;
			player.current_hp = player.default_hp;
			player.current_dmg = player.default_dmg;
			player.current_crit_chance = player.default_crit_chance;
			player.gold_amount = 0;
			
			Item sword{ 0,0,"sword",1,0,0 };
			Item ring{ 0,0,"ring",0,5,0 };
			Item armor{ 0,0,"armor",0,0,1 };
			Item potion{ 0,0,"potion",0,0,1 };

			player.sword = sword;
			player.ring = ring;
			player.armor = armor;
			player.potion = potion;

			SetCurrentStats();
			break;
		}
	}
}

void Battle(Enemy* enemy) {
	Show(game_view);
	system("cls");
	char battle_view[3600];
	for (int i = 0; i < 3600; i++) {
		battle_view[i] = default_game_view[i];
	}

	fill_n(fields_with_stats, 14, 0);
	PlayerStatsChange(battle_view);

	PasteInView(enemy_view_1, 13, 28, 493, battle_view);
	PasteInView(battle_menu, 7, 29, 2410, battle_view);

	battle_view[3170] = '>';

	Show(battle_view);
	
	int option = 0;

	int block = 0;
	bool escape = false;
	bool missclick = false;

	string message = "";
	int message_length = 0;
	char messages[231] = { ' ' }; // 7x33
	fill_n(messages, 231, ' ');

	do {
		system("cls");
		Show(battle_view);
		
		option = _getch();

		switch (option)	// Player step
		{
		case 49: //attack
			if (rand() % 100 >= enemy->dodge_chance) { 
				luck++;
				luck_opportunities++;
				int dmg_in_this_step = player.current_dmg;
				if (rand() % 100 <= player.current_crit_chance) {
					luck++;
					luck_opportunities++;
					dmg_in_this_step = dmg_in_this_step * 2;
					message = "You deal critical " + IntToString(dmg_in_this_step, 2);
					message += " damage ";
					message_length = 28;
				}
				else {
					luck_opportunities++;
					message = "You deal " + IntToString(dmg_in_this_step, 2);
					message += " damage ";
					message_length = 19;
				}
				enemy->hp -= dmg_in_this_step;
			}
			else {
				luck_opportunities++;
				message = "You missed";
				message_length = 10;
			}
			break;
		case 50: //block
			block = (player.default_hp + player.armor.hp_points) / 3;
			message = "You trying to block next attack";
			message_length = 31;
			break;
		case 51: //potion
			if (player.potion.potion_charge != 0) {
				player.current_hp += player.potion.hp_points;
				player.current_dmg += player.potion.dmg;
				player.current_crit_chance += player.potion.crit_chance;
				message = "You used potion";
				message_length = 15;
				player.potion.potion_charge--;
			}
			else {
				message = "You cannot use potion";
				message_length = 21;
			}
			break;
		case 112: //potion
			if (player.potion.potion_charge != 0) {
				player.current_hp += player.potion.hp_points;
				player.current_dmg += player.potion.dmg;
				player.current_crit_chance += player.potion.crit_chance;
				message = "You used potion";
				message_length = 15;
				player.potion.potion_charge--;
			}
			else {
				message = "You cannot use potion";
				message_length = 21;
			}
			break;
		case 52: //escape
			if (rand() % 100 <= 30) {
				luck++;
				luck_opportunities++;
				escape = true;
				message = "Successful escape attempt";
				message_length = 25;
				enemy->hp = game_level * 3;
			}
			else {
				luck_opportunities++;
				message = "Unsuccessful escape attempt";
				message_length = 27;
			}
			break;
		default:
			std::cout << option << endl;
			message = "Chose number from 1 to 4";
			message_length = 24;
			missclick = true;
			break;
		}

		for (int i = 0; i < 33; i++) {
			messages[i] = messages[i + 33 * 2];
			messages[i + 33 * 2] = messages[i + 33 * 4];
			messages[i + 33 * 4] = messages[i + 33 * 6];
			if (i < message_length) {
				messages[i + 33 * 6] = message[i];
			}
			else {
				messages[i + 33 * 6] = ' ';
			}

		}

		PasteInView(messages, 7, 33, 3170 - 120 * 6, battle_view);
		PlayerStatsChange(battle_view);
		system("cls");
		Show(battle_view);

		// Enemy step
		if (!missclick && !escape && enemy->hp>0) {
			if (rand() % 100 <= player.dodge_chance) {
				luck++;
				luck_opportunities++;
				message = "Enemy missed";
				message_length = 12;
			}
			else {
				luck_opportunities++;
				if (enemy->dmg * 2 - block <= 0) {
					message = "You fully block enemy attack";
					std::cout << block << endl;
					message_length = 28;
				}
				else if (rand() % 100 <= enemy->crit_chance) {
					luck--;
					luck_opportunities++;
					player.current_hp -= enemy->dmg * 2 - block;
					message = "Enemy deal you critical " + IntToString(enemy->dmg * 2 - block, 2);
					message += " damage";
					message_length = 33;
				}
				else if (enemy->dmg - block <= 0) {
					message = "You fully block enemy attack";
					message_length = 28;
				}
				else {
					luck_opportunities++;
					player.current_hp -= enemy->dmg - block;
					message = "Enemy deal you " + IntToString(enemy->dmg - block, 2);
					message += " damage";
					message_length = 24;
				}
			}

			for (int i = 0; i < 33; i++) {
				messages[i] = messages[i + 33 * 2];
				messages[i + 33 * 2] = messages[i + 33 * 4];
				messages[i + 33 * 4] = messages[i + 33 * 6];
				if (i < message_length) {
					messages[i + 33 * 6] = message[i];
				}
				else {
					messages[i + 33 * 6] = ' ';
				}

			}
		}
		
		system("cls");
		PasteInView(messages, 7, 33, 3170 - 120 * 6, battle_view);
		PlayerStatsChange(battle_view);
		Show(battle_view);
		
		missclick = false;
		block = 0;

	} while (player.current_hp > 0 && player.current_hp !=0 && !escape && enemy->hp > 0);

	if (escape) {
		std::cout << "You successfully run away" << endl;
		enemy->stun_time = 5;
		int pause = _getch();
		SetCurrentStatsWithoutHP();
	}

	if (enemy->hp <= 0) {
		std::cout << "You killed enemy and get 1 gold" << endl;
		killed_enemies++;
		player.gold_amount++;
		game_view[player.position] = '@';
		int pause = _getch();
		SetCurrentStatsWithoutHP();
	}
	else if(player.current_hp <= 0) {
		cout << "You lose" << endl;
		int pause = _getch();
		WinOrLoseWindow(false);
	}
}

void HelpTab() {
	char help_view_main[3600];
	for (int i = 0; i < 3600; i++) {
		help_view_main[i] = empty_view[i];
	}

	char help_view_text[97*23];
	string help_strings[23];
	fill_n(help_strings, 23, "Q");

	help_strings[1] = "Welcome to my little game. There is little tips: Q";

	help_strings[3] = "You can move with arrows on your keyboardQ";

	help_strings[5] = "@ - is your player charterQ";

	help_strings[7] = "/-----\\Q";
	help_strings[8] = "|.....|     - this is how room looks for exampleQ";
	help_strings[9] = "|.....|Q";
	help_strings[10] = "\\-----/Q";

	help_strings[12] = "$ - is gold, there is no use for it for now, so it kind of statistical thingQ";

	help_strings[14] = "& - is item, there is 4 item types: sword(increase your damage), armor(increase your health Q";

	help_strings[16] = "    points), ring(increase chance of critical strike) and potion with random effectQ";

	help_strings[18] = "Warning: you can use potion only twice per levelQ";

	help_strings[20] = "To use the potion not in battle press [p]Q";

	help_strings[22] = "E - is enemyQ";

	int i = 0;
	for (int j = 0; j < 23;) {
		bool string_end = false;
		std::cout << j << endl;

		for (i = 0; i < 97; i++) {
			if (help_strings[j][i] == 'Q') {
				string_end = true;
			}
			if (string_end) {
				break;
			}
			else {
				help_view_text[i + j * 97] = help_strings[j][i];
			}
		}

		for (i; i < 97; i++) {
			help_view_text[i + j * 97] = ' ';
			if (i == 96) {
				j++;
			}
		}
		string_end = false;
	}
	
	PasteInView(help_view_text, 23, 97, 250, help_view_main);
	system("cls");
	Show(help_view_main);
	int pause = _getch();
}

void MainMenu() {

	int start_game_pos = 53 + (120 * 12);
	int help_pos = 53 + (120 * 14);
	int exit_pos = 53 + (120 * 16);

	int choice = 1;

	bool end = false;
	int field = 53 +(120*12);
	int key_number;
	while (!end) {
		system("cls");
		Show(menu_view);

		key_number = _getche();

		switch(key_number)
		{
		case 72:// up
			choice--;
			if (choice == 0)choice = 1;
			break;
		case 80:// down
			choice++;
			if (choice == 4)choice = 3;
			break;
		case 13:// enter
			if (choice == 1) {
				play = true;
				end = true;
			}
			else if (choice == 2) {
				HelpTab();
			}else {
				end = true;
			}
			break;
		//case 114:// R
		//	break;
		//default:
		//	//cout << "Key pressed: " + key_number << endl;
		//	break;
		}

		if (choice == 1) {
			menu_view[exit_pos] = ' ';
			menu_view[help_pos] = ' ';
			menu_view[start_game_pos] = '>';
		}
		else if (choice == 3) {
			menu_view[exit_pos] = '>';
			menu_view[start_game_pos] = ' ';
			menu_view[help_pos] = ' ';
		}
		else if (choice == 2) {
			menu_view[help_pos] = '>';
			menu_view[start_game_pos] = ' ';
			menu_view[exit_pos] = ' ';
		}
	}
}

int main()
{
	srand(time(NULL));

	room1.r_index = 1;
	room2.r_index = 2;
	room3.r_index = 3;
	room4.r_index = 4;

	MainMenu();

	while (play)
	{
		if (regen_lvl) {
			InitLevel();
		}
		else {
			if (game_level == 11) {
				WinOrLoseWindow(true);
			}
			system("cls");
			game_view[next_lvl_door_pos] = '^';
			Show(lines, &overwrite_field);

			Step();
			EnemyMove(&enemy2);
			if (game_level > 3) { EnemyMove(&enemy4); }
			if (game_level > 6) { EnemyMove(&enemy3); }
			if (game_level > 9) { EnemyMove(&enemy1); }
		}
	}
}
